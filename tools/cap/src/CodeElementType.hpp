#pragma once

enum class CodeElementType
{
  ANNOTATION_TYPE_DECLARATION,
  ENUM_DECLARATION,
  RECORD_DECLARATION,
  TYPE_DECLARATION,
  IMPORT_DECLARATION,
  METHOD_DECLARATION,
  ANNOTATION_TYPE_MEMBER_DECLARATION,
  FIELD_DECLARATION,
  SINGLE_VARIABLE_DECLARATION,
  VARIABLE_DECLARATION_STATEMENT,
  VARIABLE_DECLARATION_EXPRESSION,
  VARIABLE_DECLARATION_INITIALIZER,
  ANONYMOUS_CLASS_DECLARATION,
  LAMBDA_EXPRESSION,
  LAMBDA_EXPRESSION_BODY,
  CLASS_INSTANCE_CREATION,
  ARRAY_CREATION,
  METHOD_INVOCATION,
  SUPER_METHOD_INVOCATION,
  TERNARY_OPERATOR,
  TERNARY_OPERATOR_CONDITION,
  TERNARY_OPERATOR_THEN_EXPRESSION,
  TERNARY_OPERATOR_ELSE_EXPRESSION,
  LABELED_STATEMENT,
  FOR_STATEMENT,
  FOR_STATEMENT_CONDITION,
  FOR_STATEMENT_INITIALIZER,
  FOR_STATEMENT_UPDATER,
  ENHANCED_FOR_STATEMENT,
  ENHANCED_FOR_STATEMENT_PARAMETER_NAME,
  ENHANCED_FOR_STATEMENT_EXPRESSION,
  WHILE_STATEMENT,
  WHILE_STATEMENT_CONDITION,
  IF_STATEMENT,
  IF_STATEMENT_CONDITION,
  DO_STATEMENT,
  DO_STATEMENT_CONDITION,
  SWITCH_STATEMENT,
  SWITCH_STATEMENT_CONDITION,
  SYNCHRONIZED_STATEMENT,
  SYNCHRONIZED_STATEMENT_EXPRESSION,
  TRY_STATEMENT,
  TRY_STATEMENT_RESOURCE,
  CATCH_CLAUSE,
  CATCH_CLAUSE_EXCEPTION_NAME,
  EXPRESSION_STATEMENT,
  SWITCH_CASE,
  ASSERT_STATEMENT,
  RETURN_STATEMENT,
  THROW_STATEMENT,
  CONSTRUCTOR_INVOCATION,
  SUPER_CONSTRUCTOR_INVOCATION,
  BREAK_STATEMENT,
  CONTINUE_STATEMENT,
  EMPTY_STATEMENT,
  BLOCK,
  FINALLY_BLOCK,
  TYPE,
  LIST_OF_STATEMENTS,
  ANNOTATION,
  MODIFIER,
  SINGLE_MEMBER_ANNOTATION_VALUE,
  NORMAL_ANNOTATION_MEMBER_VALUE_PAIR,
  ENUM_CONSTANT_DECLARATION,
  RECORD_COMPONENT,
  JAVADOC,
  LINE_COMMENT,
  BLOCK_COMMENT,
  LAMBDA_EXPRESSION_PARAMETER,
  METHOD_REFERENCE,
  CREATION_REFERENCE,
  INITIALIZER,
  TYPE_PARAMETER,
  ANNOTATION_TYPE_MEMBER_DEFAULT_EXPRESSION,
  //expressions
  STRING_LITERAL, CHAR_LITERAL, ARRAY_ACCESS, PREFIX_EXPRESSION, POSTFIX_EXPRESSION, INFIX_EXPRESSION, THIS_EXPRESSION, NUMBER_LITERAL, NULL_LITERAL, BOOLEAN_LITERAL, TYPE_LITERAL, FIELD_ACCESS, SIMPLE_NAME, EXPRESSION, QUALIFIED_NAME, CAST_EXPRESSION, PARENTHESIZED_EXPRESSION
};